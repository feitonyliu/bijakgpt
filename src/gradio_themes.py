from __future__ import annotations

from gradio.themes import Color, Size
from gradio.themes.soft import Soft
from gradio.themes.utils import colors, sizes, fonts
from typing import Iterable

h2o_yellow = Color(
    name="yellow",
    c50="#fffef2",
    c100="#fff9e6",
    c200="#ffecb3",
    c300="#ffe28c",
    c400="#ffd659",
    c500="#fec925",
    c600="#e6ac00",
    c700="#bf8f00",
    c800="#a67c00",
    c900="#664d00",
    c950="#403000",
)
h2o_gray = Color(
    name="gray",
    c50="#f8f8f8",
    c100="#e5e5e5",
    c200="#cccccc",
    c300="#b2b2b2",
    c400="#999999",
    c500="#7f7f7f",
    c600="#666666",
    c700="#4c4c4c",
    c800="#333333",
    c900="#191919",
    c950="#0d0d0d",
)

text_xsm = Size(
    name="text_xsm",
    xxs="4px",
    xs="5px",
    sm="6px",
    md="7px",
    lg="8px",
    xl="10px",
    xxl="12px",
)

spacing_xsm = Size(
    name="spacing_xsm",
    xxs="1px",
    xs="1px",
    sm="1px",
    md="2px",
    lg="3px",
    xl="5px",
    xxl="7px",
)

radius_xsm = Size(
    name="radius_xsm",
    xxs="1px",
    xs="1px",
    sm="1px",
    md="2px",
    lg="3px",
    xl="5px",
    xxl="7px",
)


class H2oTheme(Soft):
    def __init__(
            self,
            *,
            primary_hue: colors.Color | str = h2o_yellow,
            secondary_hue: colors.Color | str = h2o_yellow,
            neutral_hue: colors.Color | str = h2o_gray,
            spacing_size: sizes.Size | str = sizes.spacing_md,
            radius_size: sizes.Size | str = sizes.radius_md,
            text_size: sizes.Size | str = sizes.text_lg,
            font: fonts.Font
                  | str
                  | Iterable[fonts.Font | str] = (
                    fonts.GoogleFont("Montserrat"),
                    "ui-sans-serif",
                    "system-ui",
                    "sans-serif",
            ),
            font_mono: fonts.Font
                       | str
                       | Iterable[fonts.Font | str] = (
                    fonts.GoogleFont("IBM Plex Mono"),
                    "ui-monospace",
                    "Consolas",
                    "monospace",
            ),
    ):
        super().__init__(
            primary_hue=primary_hue,
            secondary_hue=secondary_hue,
            neutral_hue=neutral_hue,
            spacing_size=spacing_size,
            radius_size=radius_size,
            text_size=text_size,
            font=font,
            font_mono=font_mono,
        )
        super().set(
            link_text_color="#3344DD",
            link_text_color_hover="#3344DD",
            link_text_color_visited="#3344DD",
            link_text_color_dark="#74abff",
            link_text_color_hover_dark="#a3c8ff",
            link_text_color_active_dark="#a3c8ff",
            link_text_color_visited_dark="#74abff",
            button_primary_text_color="*neutral_950",
            button_primary_text_color_dark="*neutral_950",
            button_primary_background_fill="*primary_500",
            button_primary_background_fill_dark="*primary_500",
            block_label_background_fill="*primary_500",
            block_label_background_fill_dark="*primary_500",
            block_label_text_color="*neutral_950",
            block_label_text_color_dark="*neutral_950",
            block_title_text_color="*neutral_950",
            block_title_text_color_dark="*neutral_950",
            block_background_fill_dark="*neutral_950",
            body_background_fill="*neutral_50",
            body_background_fill_dark="*neutral_900",
            background_fill_primary_dark="*block_background_fill",
            block_radius="0 0 8px 8px",
            checkbox_label_text_color_selected_dark='#000000',
            # checkbox_label_text_size="*text_xs",  # too small for iPhone etc. but good if full large screen zoomed to fit
            checkbox_label_text_size="*text_sm",
            # radio_circle="""url("data:image/svg+xml,%3csvg viewBox='0 0 32 32' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='32' cy='32' r='1'/%3e%3c/svg%3e")""",
            # checkbox_border_width=1,
            # heckbox_border_width_dark=1,
        )


class SoftTheme(Soft):
    def __init__(
            self,
            *,
            primary_hue: colors.Color | str = colors.indigo,
            secondary_hue: colors.Color | str = colors.indigo,
            neutral_hue: colors.Color | str = colors.gray,
            spacing_size: sizes.Size | str = sizes.spacing_md,
            radius_size: sizes.Size | str = sizes.radius_md,
            text_size: sizes.Size | str = sizes.text_md,
            font: fonts.Font
                  | str
                  | Iterable[fonts.Font | str] = (
                    fonts.GoogleFont("Montserrat"),
                    "ui-sans-serif",
                    "system-ui",
                    "sans-serif",
            ),
            font_mono: fonts.Font
                       | str
                       | Iterable[fonts.Font | str] = (
                    fonts.GoogleFont("IBM Plex Mono"),
                    "ui-monospace",
                    "Consolas",
                    "monospace",
            ),
    ):
        super().__init__(
            primary_hue=primary_hue,
            secondary_hue=secondary_hue,
            neutral_hue=neutral_hue,
            spacing_size=spacing_size,
            radius_size=radius_size,
            text_size=text_size,
            font=font,
            font_mono=font_mono,
        )
        super().set(
            checkbox_label_text_size="*text_sm",
        )


h2o_logo = '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 width="100%" viewBox="0 0 187 197" enable-background="new 0 0 187 197" xml:space="preserve"><path fill="#010101" opacity="1.000000" stroke="none" 	d="M112.000000,198.000000 	C74.666672,198.000000 37.833336,198.000000 1.000005,198.000000 	C1.000003,132.333344 1.000003,66.666679 1.000002,1.000014 	C63.333324,1.000009 125.666649,1.000009 187.999969,1.000005 	C187.999985,66.666649 187.999985,132.333298 188.000000,197.999969 	C162.833328,198.000000 137.666672,198.000000 112.000000,198.000000 M135.500000,100.000183 	C100.339310,100.000282 65.178619,99.990623 30.017939,100.009048 	C23.326302,100.012558 21.017601,102.319595 21.009407,108.998108 	C20.984667,129.161316 20.975630,149.324615 21.015968,169.487778 	C21.028063,175.532913 23.463764,177.980484 29.504015,177.984375 	C72.829964,178.012283 116.155945,178.012085 159.481888,177.984650 	C165.529907,177.980820 167.971664,175.538284 167.983780,169.501892 	C168.024536,149.172089 168.024139,128.842117 167.984009,108.512321 	C167.972076,102.467026 165.536621,100.058662 159.495987,100.014305 	C151.831039,99.958008 144.165359,100.000366 135.500000,100.000183 M30.018583,80.676216 	C33.032112,80.542908 36.710663,83.000130 38.596523,78.474136 	C47.208393,84.497887 55.478443,82.758781 59.094662,73.994240 	C61.407585,68.388474 61.437992,62.588142 59.254650,56.920273 	C57.224018,51.648834 52.895645,48.744061 47.210892,49.063744 	C44.506680,49.215813 41.851089,50.232567 38.752602,50.955868 	C38.752602,46.893112 38.752602,42.656914 38.752602,38.210209 	C35.531860,38.210209 32.780247,38.210209 29.737705,38.210209 	C29.737705,52.196949 29.737705,66.013176 30.018583,80.676216 M160.849213,50.833286 	C151.697021,46.505005 147.515625,53.829826 141.797729,60.211220 	C141.797729,51.884590 141.797729,45.011627 141.797729,38.205761 	C138.683823,38.205761 136.080353,38.205761 133.290802,38.205761 	C133.290802,52.485920 133.290802,66.541840 133.290802,80.728287 	C136.228027,80.728287 138.944122,80.728287 141.554535,80.728287 	C143.004303,76.436729 139.566315,70.908119 145.414520,68.271851 	C150.113342,73.481544 150.204025,84.579025 162.044449,80.381027 	C158.453476,74.112526 154.852829,67.827126 151.299286,61.623966 	C151.566315,61.167011 151.688477,60.838127 151.908539,60.599529 	C154.725388,57.545250 157.556259,54.503887 160.849213,50.833286 M116.966827,49.042397 	C114.475464,49.031246 111.977745,48.900688 109.494026,49.033005 	C103.751152,49.338947 100.733322,51.936386 99.099304,57.952724 	C102.567078,58.805107 105.581017,60.185825 108.766533,56.336636 	C111.410721,53.141556 115.958687,55.138691 117.185463,59.854832 	C115.324913,60.371517 113.461311,60.910042 111.586021,61.404198 	C109.511353,61.950901 107.391113,62.348244 105.352028,63.001888 	C99.978195,64.724503 97.690277,67.765648 97.858749,72.740479 	C98.129333,80.730492 106.626350,84.723053 114.698990,80.675194 	C115.780571,80.132858 117.028229,79.197800 118.038185,79.372749 	C121.030235,79.891075 123.941826,80.873825 125.921196,81.412636 	C125.921196,73.845299 125.968628,67.096985 125.908318,60.349636 	C125.843521,53.100811 124.686485,51.558765 116.966827,49.042397 M91.923607,53.699890 	C91.425362,46.133633 86.130630,51.825687 83.076355,49.511749 	C83.076355,60.364388 82.890366,70.141388 83.161049,79.905724 	C83.281975,84.268059 82.636871,87.412132 77.543091,87.326126 	C77.112923,89.438698 76.758659,91.178474 76.414597,92.868217 	C86.289009,96.357109 91.796921,92.808922 91.900124,83.054428 	C92.000252,73.591103 91.922997,64.125893 91.923607,53.699890 M66.939865,50.735161 	C66.939865,60.777374 66.939865,70.819588 66.939865,80.810104 	C70.177795,80.810104 72.783112,80.810104 75.616196,80.810104 	C75.616196,70.559753 75.616196,60.517380 75.616196,50.087845 	C72.859749,50.087845 70.252357,50.087845 66.939865,50.735161 M75.839966,43.327068 	C75.839966,41.710361 75.839966,40.093655 75.839966,38.352547 	C72.623741,38.352547 69.781128,38.352547 67.036362,38.352547 	C67.036362,40.669052 67.036362,42.612278 67.036362,45.275894 	C70.098503,44.911213 72.933922,44.573532 75.839966,43.327068 M91.191307,38.101772 	C88.607788,38.101772 86.024277,38.101772 83.277237,38.101772 	C83.277237,40.487957 83.277237,42.531990 83.277237,44.776764 	C86.174934,44.776764 88.872391,44.776764 91.853294,44.776764 	C91.853294,42.610092 91.853294,40.678925 91.191307,38.101772 z"/><path fill="#FE9900" opacity="1.000000" stroke="none" 	d="M136.000000,100.000183 	C144.165359,100.000366 151.831039,99.958008 159.495987,100.014305 	C165.536621,100.058662 167.972076,102.467026 167.984009,108.512321 	C168.024139,128.842117 168.024536,149.172089 167.983780,169.501892 	C167.971664,175.538284 165.529907,177.980820 159.481888,177.984650 	C116.155945,178.012085 72.829964,178.012283 29.504015,177.984375 	C23.463764,177.980484 21.028063,175.532913 21.015968,169.487778 	C20.975630,149.324615 20.984667,129.161316 21.009407,108.998108 	C21.017601,102.319595 23.326302,100.012558 30.017939,100.009048 	C65.178619,99.990623 100.339310,100.000282 136.000000,100.000183 M77.103073,127.538910 	C72.983498,138.198257 68.863914,148.857620 64.820656,159.319519 	C74.590240,163.421753 74.704025,155.207901 77.149765,150.014328 	C81.831177,150.014328 86.324524,150.199463 90.793228,149.947464 	C93.641129,149.786865 94.848511,150.896194 95.799248,153.469223 	C98.610092,161.076355 98.725754,161.033615 107.008148,159.308167 	C102.055351,146.932495 97.050140,134.633286 92.236923,122.259384 	C90.964775,118.988922 89.924629,116.750603 85.475044,116.757980 	C81.095657,116.765251 80.253044,119.169426 79.193947,122.173058 	C78.641479,123.739853 77.994965,125.273491 77.103073,127.538910 M114.622330,116.962776 	C111.208206,116.802299 112.127747,119.372665 112.118095,121.148132 	C112.059311,131.966919 112.088585,142.786179 112.088501,153.605286 	C112.088486,155.678329 112.088501,157.751373 112.088501,159.752869 	C115.336624,159.752869 117.761032,159.752869 120.299469,159.752869 	C120.299469,145.397156 120.299469,131.332306 120.299469,116.958580 	C118.503731,116.958580 117.019981,116.958580 114.622330,116.962776 z"/><path fill="#F5F5F5" opacity="1.000000" stroke="none" 	d="M29.878143,80.252808 	C29.737705,66.013176 29.737705,52.196949 29.737705,38.210209 	C32.780247,38.210209 35.531860,38.210209 38.752602,38.210209 	C38.752602,42.656914 38.752602,46.893112 38.752602,50.955868 	C41.851089,50.232567 44.506680,49.215813 47.210892,49.063744 	C52.895645,48.744061 57.224018,51.648834 59.254650,56.920273 	C61.437992,62.588142 61.407585,68.388474 59.094662,73.994240 	C55.478443,82.758781 47.208393,84.497887 38.595341,78.469528 	C36.710663,83.000130 33.032112,80.542908 29.878143,80.252808 M41.759922,56.266159 	C38.185551,60.333256 37.262463,68.135170 40.033840,72.426941 	C41.900417,75.317535 44.393570,77.169144 47.934444,75.015076 	C51.809696,72.657593 52.187263,68.573044 51.555176,64.872887 	C51.018242,61.729759 49.273083,58.640663 47.425941,55.967541 	C46.879299,55.176460 44.172813,55.877834 41.759922,56.266159 z"/><path fill="#F5F5F5" opacity="1.000000" stroke="none" 	d="M160.616394,51.146271 	C157.556259,54.503887 154.725388,57.545250 151.908539,60.599529 	C151.688477,60.838127 151.566315,61.167011 151.299286,61.623966 	C154.852829,67.827126 158.453476,74.112526 162.044449,80.381027 	C150.204025,84.579025 150.113342,73.481544 145.414520,68.271851 	C139.566315,70.908119 143.004303,76.436729 141.554535,80.728287 	C138.944122,80.728287 136.228027,80.728287 133.290802,80.728287 	C133.290802,66.541840 133.290802,52.485920 133.290802,38.205761 	C136.080353,38.205761 138.683823,38.205761 141.797729,38.205761 	C141.797729,45.011627 141.797729,51.884590 141.797729,60.211220 	C147.515625,53.829826 151.697021,46.505005 160.616394,51.146271 z"/><path fill="#F5F5F5" opacity="1.000000" stroke="none" 	d="M117.394928,49.084011 	C124.686485,51.558765 125.843521,53.100811 125.908318,60.349636 	C125.968628,67.096985 125.921196,73.845299 125.921196,81.412636 	C123.941826,80.873825 121.030235,79.891075 118.038185,79.372749 	C117.028229,79.197800 115.780571,80.132858 114.698990,80.675194 	C106.626350,84.723053 98.129333,80.730492 97.858749,72.740479 	C97.690277,67.765648 99.978195,64.724503 105.352028,63.001888 	C107.391113,62.348244 109.511353,61.950901 111.586021,61.404198 	C113.461311,60.910042 115.324913,60.371517 117.185463,59.854832 	C115.958687,55.138691 111.410721,53.141556 108.766533,56.336636 	C105.581017,60.185825 102.567078,58.805107 99.099304,57.952724 	C100.733322,51.936386 103.751152,49.338947 109.494026,49.033005 	C111.977745,48.900688 114.475464,49.031246 117.394928,49.084011 M116.583054,66.755920 	C114.309441,67.223999 111.731361,67.190315 109.861992,68.324608 	C108.457306,69.176941 107.962761,71.529228 107.063042,73.213768 	C108.845306,74.039871 110.796143,75.797806 112.377213,75.511780 	C116.582352,74.751007 117.558311,71.357262 116.583054,66.755920 z"/><path fill="#F5F5F5" opacity="1.000000" stroke="none" 	d="M91.923630,54.180702 	C91.922997,64.125893 92.000252,73.591103 91.900124,83.054428 	C91.796921,92.808922 86.289009,96.357109 76.414597,92.868217 	C76.758659,91.178474 77.112923,89.438698 77.543091,87.326126 	C82.636871,87.412132 83.281975,84.268059 83.161049,79.905724 	C82.890366,70.141388 83.076355,60.364388 83.076355,49.511749 	C86.130630,51.825687 91.425362,46.133633 91.923630,54.180702 z"/><path fill="#F5F5F5" opacity="1.000000" stroke="none" 	d="M67.292412,50.411503 	C70.252357,50.087845 72.859749,50.087845 75.616196,50.087845 	C75.616196,60.517380 75.616196,70.559753 75.616196,80.810104 	C72.783112,80.810104 70.177795,80.810104 66.939865,80.810104 	C66.939865,70.819588 66.939865,60.777374 67.292412,50.411503 z"/><path fill="#F5F5F5" opacity="1.000000" stroke="none" 	d="M75.804657,43.781460 	C72.933922,44.573532 70.098503,44.911213 67.036362,45.275894 	C67.036362,42.612278 67.036362,40.669052 67.036362,38.352547 	C69.781128,38.352547 72.623741,38.352547 75.839966,38.352547 	C75.839966,40.093655 75.839966,41.710361 75.804657,43.781460 z"/><path fill="#F6F6F6" opacity="1.000000" stroke="none" 	d="M91.522301,38.424763 	C91.853294,40.678925 91.853294,42.610092 91.853294,44.776764 	C88.872391,44.776764 86.174934,44.776764 83.277237,44.776764 	C83.277237,42.531990 83.277237,40.487957 83.277237,38.101772 	C86.024277,38.101772 88.607788,38.101772 91.522301,38.424763 z"/><path fill="#080500" opacity="1.000000" stroke="none" 	d="M77.247002,127.180511 	C77.994965,125.273491 78.641479,123.739853 79.193947,122.173058 	C80.253044,119.169426 81.095657,116.765251 85.475044,116.757980 	C89.924629,116.750603 90.964775,118.988922 92.236923,122.259384 	C97.050140,134.633286 102.055351,146.932495 107.008148,159.308167 	C98.725754,161.033615 98.610092,161.076355 95.799248,153.469223 	C94.848511,150.896194 93.641129,149.786865 90.793228,149.947464 	C86.324524,150.199463 81.831177,150.014328 77.149765,150.014328 	C74.704025,155.207901 74.590240,163.421753 64.820656,159.319519 	C68.863914,148.857620 72.983498,138.198257 77.247002,127.180511 M88.283798,143.014999 	C89.979713,143.031998 91.851120,143.233139 90.817451,140.496048 	C89.200249,136.213776 87.591400,131.928329 85.544685,126.490227 	C83.309662,132.621475 81.509613,137.559494 79.520599,143.015884 	C82.774986,143.015884 85.072304,143.015884 88.283798,143.014999 z"/><path fill="#160D00" opacity="1.000000" stroke="none" 	d="M115.079285,116.960678 	C117.019981,116.958580 118.503731,116.958580 120.299469,116.958580 	C120.299469,131.332306 120.299469,145.397156 120.299469,159.752869 	C117.761032,159.752869 115.336624,159.752869 112.088501,159.752869 	C112.088501,157.751373 112.088486,155.678329 112.088501,153.605286 	C112.088585,142.786179 112.059311,131.966919 112.118095,121.148132 	C112.127747,119.372665 111.208206,116.802299 115.079285,116.960678 z"/><path fill="#090909" opacity="1.000000" stroke="none" 	d="M42.107994,56.080727 	C44.172813,55.877834 46.879299,55.176460 47.425941,55.967541 	C49.273083,58.640663 51.018242,61.729759 51.555176,64.872887 	C52.187263,68.573044 51.809696,72.657593 47.934444,75.015076 	C44.393570,77.169144 41.900417,75.317535 40.033840,72.426941 	C37.262463,68.135170 38.185551,60.333256 42.107994,56.080727 z"/><path fill="#0B0B0B" opacity="1.000000" stroke="none" 	d="M116.844704,67.109344 	C117.558311,71.357262 116.582352,74.751007 112.377213,75.511780 	C110.796143,75.797806 108.845306,74.039871 107.063034,73.213768 	C107.962761,71.529228 108.457306,69.176941 109.861992,68.324608 	C111.731361,67.190315 114.309441,67.223999 116.844704,67.109344 z"/><path fill="#EF8F00" opacity="1.000000" stroke="none" 	d="M87.826714,143.015442 	C85.072304,143.015884 82.774986,143.015884 79.520599,143.015884 	C81.509613,137.559494 83.309662,132.621475 85.544685,126.490227 	C87.591400,131.928329 89.200249,136.213776 90.817451,140.496048 	C91.851120,143.233139 89.979713,143.031998 87.826714,143.015442 z"/></svg>'


def get_h2o_title(title, description):
    # NOTE: Check full width desktop, smallest width browser desktop, iPhone browsers to ensure no overlap etc.
    return f"""<div style="float:left; justify-content:left; height: 80px; width: 195px; margin-top:0px">
                    {description}
                </div>
                <div style="display:flex; justify-content:center; margin-bottom:30px; margin-right:330px;">
                    <div style="height: 60px; width: 60px; margin-right:20px;">{h2o_logo}</div>
                    <h1 style="line-height:60px">{title}</h1>
                </div>
                """


def get_simple_title(title, description):
    return f"""{description}<h1 align="center"> {title}</h1>"""


def get_dark_js() -> str:
    return """
        if (document.querySelectorAll('.dark').length) {
            document.querySelectorAll('.dark').forEach(el => el.classList.remove('dark'));
        } else {
            document.querySelector('body').classList.add('dark');
        }
    """


def get_heap_js(heapAppId: str) -> str:
    return (
        """globalThis.window.heap=window.heap||[],heap.load=function(e,t){window.heap.appid=e,window.heap.config=t=t||{};var r=document.createElement("script");r.type="text/javascript",r.async=!0,r.src="https://cdn.heapanalytics.com/js/heap-"+e+".js";var a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(r,a);for(var n=function(e){return function(){heap.push([e].concat(Array.prototype.slice.call(arguments,0)))}},p=["addEventProperties","addUserProperties","clearEventProperties","identify","resetIdentity","removeEventProperty","setEventProperties","track","unsetEventProperty"],o=0;o<p.length;o++)heap[p[o]]=n(p[o])};"""
        f"""heap.load("{heapAppId}");""")


def wrap_js_to_lambda(*args: str) -> str:
    newline = "\n"
    return f"""
        () => {{
            {newline.join([a for a in args if a is not None])}
        }}
    """
